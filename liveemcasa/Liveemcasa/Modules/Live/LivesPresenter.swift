//
//  LivesPresenter.swift
//  Liveemcasa
//
//  Created by Daniel Maia dos Passos on 04/04/20.
//  Copyright (c) 2020 Daniel Maia dos Passos. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class LivesPresenter {
  
  // MARK: - Private properties -
  
  private weak var view: LivesViewInterface?
  private let interactor: LivesInteractor
  
  private var list = [Live]()
  static let cellIdentifier = "LivesCollectionViewCell"
  
  private enum Strings {
    static let title = "Lives"
  }
  
  // MARK: - Lifecycle -
  
  init(view: LivesViewInterface,
       interactor: LivesInteractor) {
    self.view = view
    self.interactor = interactor
    
    self.interactor.response = self
  }
  
  // MARK: - Private Functions
  private func bindLives(lives: [Live]) {
    list = lives
    view?.showProgress(show: false)
    view?.updateTableView()
  }
  
}

// MARK: - Extensions -

extension LivesPresenter: LivesPresenterInterface {
  
  func getTitle() -> String {
    return Strings.title
  }
  
  func viewConfiguration() {
    view?.showProgress(show: true)
    self.interactor.getLives()
  }
  
  func numberOfItems() -> Int {
    return  list.count
  }
  
  func cell(for collectionView: UICollectionView, at index: IndexPath) -> UICollectionViewCell {
    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: LivesCollectionViewCell.identifier, for: index) as? LivesCollectionViewCell
   
    cell?.configureCell(live: list[index.row])
    
    return cell ?? UICollectionViewCell()
  }
}

extension LivesPresenter: GetLivesInteractorProtocol {
  func getLivesSuccess(success: [Live]) {
    self.bindLives(lives: success)
  }
  
  func getLivesError(error: Error) {
    
  }
}

